{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The problem \n",
    "![alt text](mdp-chain.png \"Title\")\n",
    "Figure 2 from the book. A generator of bounded random walks. This Markov process generated the data sequences in the example. All walks begin in state D. From states B, C, D, E, and F, the walk has a 50% chance of moving either to the right or to the left. If either edge state, A or G, is entered, then the walk terminates.\n",
    "\n",
    "#### Setting up our environment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import math, sys, json, random \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib \n",
    "import matplotlib.style\n",
    "import matplotlib.pyplot as plt\n",
    "# import seaborn as sns\n",
    "from sklearn.externals import joblib # Still better than pickle in 2018?\n",
    "# To protect from IPython kernel switching mistakes\n",
    "from __future__ import division\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Utility Functions\n",
    "We implement the TD Lambda algorithm below as `tdlEstimate` the image below is from chapter 6 of the Sutton textbook.\n",
    "![alt text](td0-algo.png \"Title\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# TD Lambda\n",
    "def tdlEstimate(alpha, _lambda, state_sequence, values):\n",
    "    \"\"\"\n",
    "    alphas: array of arbitrary values (e.g. 0.005, 0.01, 0.015)\n",
    "    _lambda: chosen from an arbitrary array (e.g. 0.1, 1)\n",
    "    state sequence: an array chosen from an arbitrary set of sequence simulations such as [3, 4, 5, 6] or \\\n",
    "    [3, 4, 3, 2, 3, 4, 3, 4, 5, 6] per the MDP figure 2 above.\n",
    "    returns: \"\"\"\n",
    "    \n",
    "    # Per figure 2, we have 7 possible states, with two of them being end states (A,G)\n",
    "    \n",
    "    eligibility = np.zeros(7)\n",
    "    updates     = np.zeros(7)\n",
    "\n",
    "    for t in range(0, len(state_sequence) - 1):\n",
    "        current_state = state_sequence[t]\n",
    "        next_state = state_sequence[t+1]\n",
    "\n",
    "        eligibility[current_state] += 1.0\n",
    "\n",
    "        td = alpha * (values[next_state] - values[current_state])\n",
    "\n",
    "        updates += td * eligibility\n",
    "        eligibility *= _lambda\n",
    "\n",
    "    return updates\n",
    "\n",
    "# Simulator to generate random walk sequences in our MDP defined in fig 2 above\n",
    "states = ['A', 'B', 'C', 'D', 'E', 'F', 'G']\n",
    "\n",
    "def simulate():\n",
    "    \"\"\"returns: a sequence of states picked from a uniform random sample such as \n",
    "    [3, 2, 1, 0] or [3, 4, 3, 4, 3, 4, 5, 6]\n",
    "    \"\"\"\n",
    "    states = [3] # Start in center at \"D\"\n",
    "    while states[-1] not in [0, 6]:\n",
    "        states.append(states[-1] +  (1 if random.choice([True, False]) else -1)) # go left or right randomly\n",
    "\n",
    "    return states"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# Setup data for plots\n",
    "\n",
    "random.seed(101)\n",
    "# pg.20 gives true probabilities for states B, C, D, E, F\n",
    "# truth = np.arange(1, 6) / 6.0\n",
    "truth = [1 / 6, 1 / 3, 1 / 2, 2 / 3, 5 / 6]\n",
    "\n",
    "dtype = np.float\n",
    "\n",
    "num_train_sets = 100\n",
    "num_sequences   = 10 # or episodes\n",
    "\n",
    "training_sets = [[simulate() for i in range(num_sequences)] for i in range(num_train_sets)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Figure 3 Page 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Figure 3\n",
    "alphas  = np.array([0.005, 0.01, 0.015], dtype=dtype)\n",
    "lambdas = np.array([0.0, 0.1, 0.3, 0.5, 0.7, 0.9, 1.0], dtype=dtype) # given in figure 3 caption\n",
    "\n",
    "results = []\n",
    "\n",
    "for _lambda in lambdas:\n",
    "    for alpha in alphas:\n",
    "        rmses = []\n",
    "        for training_set in training_sets:\n",
    "            # values initialized to zero and updates via tdlEstimate\n",
    "            values = np.zeros(7, dtype=dtype)\n",
    "            iterations = 0\n",
    "            \n",
    "            while True:\n",
    "                iterations += 1\n",
    "                before  = np.copy(values)\n",
    "                updates = np.zeros(7, dtype=dtype)\n",
    "                # The reward for reaching state \"G\" (element 7)\n",
    "                values[6] = 1.0\n",
    "\n",
    "                for sequence in training_set: \n",
    "                    updates += tdlEstimate(alpha, _lambda, sequence, values)\n",
    "\n",
    "                values += updates\n",
    "                diff = np.sum(np.absolute(before - values))\n",
    "\n",
    "                if diff < .000001:\n",
    "                    break\n",
    "\n",
    "            estimate = np.array(values[1:-1], dtype=dtype)\n",
    "            error = (truth - estimate)\n",
    "            rms   = np.sqrt(np.average(np.power(error, 2)))\n",
    "            rmses.append(rms)\n",
    "\n",
    "        result = [_lambda, alpha, np.mean(rmses), np.std(rmses)]\n",
    "        results.append(result)\n",
    "\n",
    "# outputs\n",
    "# joblib.dump(results, 'results.pkl') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>lambda</th>\n",
       "      <th>alpha</th>\n",
       "      <th>rms</th>\n",
       "      <th>rmsstd</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.235702</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.05</td>\n",
       "      <td>0.175010</td>\n",
       "      <td>0.002556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.10</td>\n",
       "      <td>0.131192</td>\n",
       "      <td>0.009537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.15</td>\n",
       "      <td>0.103448</td>\n",
       "      <td>0.020459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.0</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.091540</td>\n",
       "      <td>0.033838</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   lambda  alpha       rms    rmsstd\n",
       "0     0.0   0.00  0.235702  0.000000\n",
       "1     0.0   0.05  0.175010  0.002556\n",
       "2     0.0   0.10  0.131192  0.009537\n",
       "3     0.0   0.15  0.103448  0.020459\n",
       "4     0.0   0.20  0.091540  0.033838"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# results = joblib.load('results.pkl') \n",
    "data = pd.DataFrame(results)\n",
    "data.columns = [\"lambda\", \"alpha\", \"rms\", \"rmsstd\"]\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "data = data[data.groupby(['lambda'])['rms'].transform(min) == data['rms']].set_index(keys=['lambda'])\n",
    "data.drop('alpha', 1, inplace=True,)\n",
    "data.drop('rmsstd', 1,inplace=True,)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I repeatedly calculated the TD equation on a given set until the RMSE  between the weights (new values) and the ideal probabilities was less than my arbitrary threshold.  \n",
    "The values and trend are very similar to the original but more tweaking to my environment assumptions might have improved the similarity. Given more time and intellect I’d like to do a random search of a space of hyper-parameters and see what most closely approximates the original. RMS error increases with non-linearity in relation to lambda. The initial curtailing isn’t the same as Sutton with lambda 0 performing the best out right.\n",
    "\n",
    "If we choose to imitate figure 3 literally we get the below. I would prefer grid lines though, which is just a matter of using default seaborn aesthetics."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x116d60e80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# sns.set_style(\"white\")\n",
    "plt.figure(num=None, figsize=(10, 6), dpi=72)\n",
    "plt.margins(.05)\n",
    "plt.xlabel(r\"$\\lambda$\")\n",
    "plt.ylabel(\"RMS\")\n",
    "plt.title(\"Figure 3\")\n",
    "plt.xticks([i * .1 for i in range(0, 10)])\n",
    "plt.yticks([i * .01 for i in range(10, 19)])\n",
    "plt.text(.79, .17, \"Widrow-Hoff\", ha=\"center\", va=\"center\", rotation=0,size=15)\n",
    "plt.text(-.22, .174, \"ERROR\\nUSING\\nBEST α\",size=15)\n",
    "plt.plot(data,marker='o');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Figure 5 Page 21"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 3 µs, sys: 1 µs, total: 4 µs\n",
      "Wall time: 7.15 µs\n"
     ]
    }
   ],
   "source": [
    "%time \n",
    "alphas  = [0.05 * i for i in range(0,16)]\n",
    "lambdas = [0.05 * i for i in range(0, 21)]\n",
    "\n",
    "results = []\n",
    "\n",
    "for _lambda in lambdas:\n",
    "    for alpha in alphas:\n",
    "        rms_vals = []\n",
    "        for training_set in training_sets:\n",
    "\n",
    "            values = np.array([0.5 for i in range(7)])\n",
    "\n",
    "            for sequence in training_set:\n",
    "                values[0] = 0.0\n",
    "                values[6] = 1.0\n",
    "                values += tdlEstimate(alpha, _lambda, sequence, values)\n",
    "\n",
    "            estimate = np.array(values[1:-1])\n",
    "            error = (truth - estimate)\n",
    "            rms   = np.sqrt(np.average(np.power(error, 2)))\n",
    "\n",
    "            rms_vals.append(rms)\n",
    "\n",
    "        result = [_lambda, alpha, np.mean(rms_vals), np.std(rms_vals)]\n",
    "        results.append(result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.text.Text at 0x11b116860>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nvPPOO6SlpbF06VJOOeWU5m2lpaWUlpZy4YUXArBhwwZSUvR78YG8/PLLBINB7r77biZMmNC8fvHi\nxaSkpPC73/2OjIy+Gxjbdu+jtHIvFxw7JtaldIn+ZYokmVGjRjFu3DheffXVVutff/113J0LLrhg\nv21Ny02hmJmZSXp6eo/U4+7s3bu3R/bV12zbtg2g1SXIpvVZWVl9OtQAVhdXA/F1fw0UbCJJae7c\nubz55putAmXp0qVMnjyZT33qU7zxxhsEg8FW28yME044AYh8j23dunWceuqpZGVlMWbMGH74wx+2\n2keTwsJCPvOZz/DCCy8wY8YMsrKyeOCBBwBobGzk9ttv59BDDyUzM5PCwkK++93vUldX1/z+66+/\nniFDhrQaWf5rX/saZsY999zTvG7r1q2YGb/5zW8O7g+rHffddx+TJ08mMzOTUaNG8dWvfpXq6upW\nx3nzzTcDMGzYMMyMW265BTPjoYceoqamBjPDzFi4cGFUajxYTR1HpivYRKSvmzt3Lg0NDSxbtqx5\n3dKlS5kzZw5z5sxh586dvPPOO622HX744QwZMiTi/rZs2cIpp5zCmjVr+M53vsN1113HI488wt13\n3x2x/YYNG/jCF77AJz7xCe6+++7mzhNXX301N910E9OnT+euu+7i5JNP5ic/+UnzJVCAE088kcrK\nStatW9e8bsmSJaSkpLBkyZJW6wBOOumkTv2Z7N69m4qKiv1eLUO1yS233MJXv/pVRo0axS9+8QvO\nO+88HnjgAU477TQaGhoA+OUvf9l8qfc3v/kNixYt4txzz2XRokWceOKJZGZmsmjRIhYtWtTpGnvb\nquIq+vdLY8Kw7t1jjBl3T9jX6NGjXUT2t27dOgf89ttvd3f3hoYGz8nJ8Ycfftjd3UeMGOG//vWv\n3d19165dnpqa6l/60pea319QUOCXXXZZ8/J1113ngC9btqx53bZt23zgwIEO+MaNG1u9F/C//vWv\nrWpas2aNA3711Ve3Wv+tb33LAV+8eHHzfgG/77773N29urraU1JS/IILLvARI0Y0v+/rX/+65+Xl\neTAY7PDP4qWXXnKgw1dOTk6r48rIyPDTTjvNA4FA8/p7773XAV+wYEHzuptvvtkB3759e6vPvOyy\ny1rtsy/a19DoE7/3F7/0d8sO3LgXAGXeyZ/9OmMTSUJHHHEEQ4YMab539tZbb1FTU9Pc63HOnDks\n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\nRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x10c6b4320>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "data = pd.DataFrame(results)\n",
    "\n",
    "data.columns = [\"lambda\", \"alpha\", \"rms\", \"rmsstd\"]\n",
    "\n",
    "data = data[data.groupby(['lambda'])['rms'].transform(min) == \\\n",
    "            data['rms']].set_index(keys=['lambda'])\n",
    "\n",
    "data = data.drop('alpha', 1)\n",
    "data = data.drop('rmsstd', 1)\n",
    "\n",
    "plt.figure(num=None, figsize=(6, 6), dpi=80)\n",
    "plt.plot(data, marker='o') \n",
    "plt.margins(.10)\n",
    "plt.xlabel(r\"$\\lambda$\")\n",
    "plt.ylabel(\"RMS\")\n",
    "plt.title(\"Figure 5 \")\n",
    "plt.text(.7, .185, \"Widrow-Hoff\", ha=\"center\", va=\"center\", rotation=0,size=15)\n",
    "plt.text(-.25,.204, \"ERROR\\nUSING\\nBEST α\",size=12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
